<?xml version="1.0" encoding="ISO-8859-1"?>
<xsl:stylesheet 
  version="1.0"
  xml:lang="en"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  
  xmlns:java="http://eric.brechemier.name/2004/xml/iso-java"
  xmlns:javadoc="http://eric.brechemier.name/2004/xml/iso-javadoc"
  xmlns:default="#default"
>
  <xsl:output method="text" encoding="ISO-8859-1" />
   
  <!--
  Input:
    An Xml iso-java file.
  
  Output:
    A java source corresponding to a class.
    
  Created:
   by Eric Bréchemier
   on October 19th, 2004
  
  Executed with Saxon without specific extensions; command line example:
  (java/)java -jar (saxon/)saxon.jar -o XsltAbstractDecoder.xsl FemtoSvg.xsd XsdToXsltAbstractDecoder.xsl
  -->
  <xsl:strip-space elements="java:* javadoc:* default:*" />
  <xsl:template match="text()" />

<!-- global java file structure -->  
<xsl:template match="java:unit"
>/* PLEASE DO NOT EDIT THIS FILE, it was generated by an XSLT Transformation */

<xsl:apply-templates mode="declarePackage" select="@package" />

<xsl:apply-templates mode="declareImports" select="java:imports" />

<xsl:apply-templates mode="declareClass" select="java:class" />

/* END OF GENERATED FILE. PLEASE DO NOT EDIT THIS FILE, it was generated by an XSLT Transformation */
</xsl:template>

<!-- package and imports -->

<xsl:template mode="declarePackage" match="@package"
>package <xsl:value-of select="." />;
<xsl:call-template name="newLine" />
</xsl:template>
  
<xsl:template mode="declareImports" match="java:import[@package and @class]"
>import <xsl:value-of select="@package"/>.<xsl:value-of select="@class"/>;
</xsl:template>

<!-- class declaration -->
<!-- NOTA only public class declaration handled for now -->

<xsl:template mode="declareClass" match="java:class[@name]">
<xsl:call-template name="newLine" />
<xsl:apply-templates mode="javaDoc" select="javadoc:comment" 
/>public class <xsl:value-of select="@name"/> {
  <xsl:call-template name="newLine" />
  <xsl:apply-templates mode="declareFields" select="java:*"/>
}
</xsl:template>

<!-- attributes and methods declaration -->

<xsl:template mode="declareFields" match="java:fieldsGroup">
  <xsl:value-of select="."/><xsl:call-template name="newLine"/>
</xsl:template>

<xsl:template mode="declareFields" match="java:attribute[@type and @name]">
  <xsl:apply-templates mode="declareVariable" select="." />
</xsl:template>

<xsl:template mode="declareFields" match="java:method[@returnType and @name]">
  <xsl:call-template name="newLine" />
  <xsl:apply-templates mode="javaDoc" select="javadoc:comment"/>
  <xsl:call-template name="indent"/>
  <xsl:apply-templates mode="access" select="@access"/>
  <xsl:apply-templates mode="static" select="@static" />
  <xsl:value-of select="@returnType"/>
  <xsl:call-template name="space"/>
  <xsl:value-of select="@name"/>
  <xsl:text>( </xsl:text>
    <xsl:apply-templates mode="params" select="java:params" />
  <xsl:text> ) </xsl:text>
  <xsl:apply-templates mode="throws" select="java:throws"/>
  <xsl:text>{ </xsl:text><xsl:call-template name="newLine" />
    <xsl:call-template name="newLine" />
    <xsl:apply-templates mode="body" select="java:body" /><xsl:call-template name="newLine" />
  <xsl:call-template name="indent"/>}<xsl:call-template name="newLine" />
</xsl:template>

<xsl:template mode="access" match="@access[parent::java:attribute | parent::java:method]">
  <xsl:value-of select="."/>
  <xsl:call-template name="space"/>
</xsl:template>

<xsl:template mode="static" match="@static[.='true']">
  <xsl:text>static </xsl:text>
</xsl:template>

<xsl:template mode="final" match="@final[.='true']">
  <xsl:text>final </xsl:text>
</xsl:template>

<xsl:template mode="params" match="java:params[java:param] | java:call[java:param]">
  <xsl:for-each select="java:param">
    <xsl:if test="preceding-sibling::java:param">, </xsl:if>
    <xsl:apply-templates mode="param" select="." />
  </xsl:for-each>
  <xsl:variable name="textParams" select="child::text()" />
  <xsl:if test="normalize-space( $textParams )">
    <xsl:text>, </xsl:text><xsl:value-of select="$textParams" />
  </xsl:if>
</xsl:template>

<xsl:template mode="param" match="java:param[@type and @name]">
  <xsl:value-of select="@type" /><xsl:call-template name="space"/><xsl:value-of select="@name" />
</xsl:template>

<xsl:template mode="param" match="java:param[@value]">
  <xsl:value-of select="@value" />
</xsl:template>

<xsl:template mode="param" match="java:param">
  <xsl:apply-templates mode="instructionPart" />
</xsl:template>

<xsl:template mode="throws" match="java:throws">
  <xsl:text>throws </xsl:text>
  <xsl:for-each select="java:exception">
    <xsl:if test="position() &gt; 1">, </xsl:if>
    <xsl:value-of select="@name" />
  </xsl:for-each>
  <xsl:call-template name="space" />
</xsl:template>

<!-- new, delete -->

<xsl:template mode="instructionPart" match="java:new[@type and @arraySize]" priority="2">
  <xsl:text>new </xsl:text><xsl:value-of select="@type"/>
  <xsl:text>[</xsl:text><xsl:value-of select="@arraySize"/><xsl:text>]</xsl:text>
</xsl:template>

<xsl:template mode="instructionPart" match="java:new[@type]" priority="1">
  <xsl:text>new </xsl:text><xsl:value-of select="@type"/>
</xsl:template>

<xsl:template mode="body" match="java:delete[@name]">
  <xsl:call-template name="indent"/><xsl:value-of select="@name"/><xsl:text>=null;</xsl:text>
  <xsl:call-template name="newLine" />
</xsl:template>

<!-- method calls -->

<xsl:template mode="body" match="java:call[@method]">
  <xsl:call-template name="indent"/>
  
  <xsl:apply-templates mode="instructionPart" select="." />
  
  <xsl:text>;</xsl:text>
  <xsl:call-template name="newLine" />
</xsl:template>

<xsl:template mode="instructionPart" match="java:call[@method]">
  <xsl:apply-templates mode="object" select="@object" />
  <xsl:value-of select="@method" />
  <xsl:text>(</xsl:text>
    <xsl:apply-templates mode="params" select="."/>
  <xsl:text>)</xsl:text>
</xsl:template>

<xsl:template mode="object" match="@object">
  <xsl:value-of select="." />
  <xsl:text>.</xsl:text>
</xsl:template>

<!-- variable declaration and initializing -->

<xsl:template mode="body" match="java:variable[@type and @name]">
  <xsl:apply-templates mode="declareVariable" select="." />
</xsl:template>

<xsl:template mode="declareVariable" match="java:attribute[@type and @name] | java:variable[@type and @name]">
  <xsl:call-template name="indent"/>
  <xsl:apply-templates mode="access" select="@access" />
  <xsl:apply-templates mode="static" select="@static" />
  <xsl:apply-templates mode="final" select="@final" />
  
  <xsl:value-of select="@type"/>
  <xsl:call-template name="space"/>
  
  <xsl:apply-templates mode="initVariable" select="." />
</xsl:template>

<xsl:template mode="body" match="java:init">
  <xsl:call-template name="indent"/>
  <xsl:apply-templates mode="initVariable" select="." />
</xsl:template>

<xsl:template mode="initVariable" match="java:init[@name] | java:attribute[@name] | java:variable[@name]" >
  <xsl:variable name="initValue" select="normalize-space(.)" />
  
  <xsl:value-of select="@name"/>
  <xsl:apply-templates mode="arrayPosition" select="self::java:init[@arrayPosition]" />
  <xsl:if test="$initValue or child::java:*">
    <xsl:text> = </xsl:text>
    <xsl:apply-templates mode="instructionPart" />
  </xsl:if>
  <xsl:text>;</xsl:text>
  <xsl:call-template name="newLine" />
</xsl:template>

<!-- array position -->
<xsl:template mode="arrayPosition" match="java:*[@arrayPosition]">
  <xsl:text>[</xsl:text><xsl:value-of select="@arrayPosition"/><xsl:text>]</xsl:text>
</xsl:template>

<!-- return -->
<xsl:template mode="body" match="java:return[@value]">
  <xsl:call-template name="indent"/>
    <xsl:text>return </xsl:text><xsl:value-of select="@value"/><xsl:text>;</xsl:text>
  <xsl:call-template name="newLine" />
</xsl:template>

<!-- type conversions -->
<xsl:template mode="instructionPart" match="java:cast[@type]">
  <xsl:text>(</xsl:text><xsl:value-of select="@type" /><xsl:text>)</xsl:text>
  <xsl:text>( </xsl:text>  
    <xsl:apply-templates mode="instructionPart" />
  <xsl:text> )</xsl:text>
</xsl:template>

<!-- basic instructions -->
<xsl:template mode="body" match="java:return">
  <xsl:call-template name="indent"/>
    <xsl:text>return </xsl:text>
    <xsl:apply-templates mode="body" />
    <xsl:text>;</xsl:text>
  <xsl:call-template name="newLine" />
</xsl:template>

<xsl:template mode="body" match="java:increment[@variable]">
  <xsl:call-template name="indent"/>
    <xsl:value-of select="@variable"/><xsl:text>++;</xsl:text>
  <xsl:call-template name="newLine" />
</xsl:template>

<xsl:template mode="instructionPart" match="java:value[@variable and @arrayPosition]" priority="2">
  <xsl:value-of select="@variable" />
  <xsl:apply-templates mode="arrayPosition" select="." />
</xsl:template>

<xsl:template mode="instructionPart" match="java:value[@variable]">
  <xsl:value-of select="@variable" />
</xsl:template>

<xsl:template mode="instructionPart" match="java:value">
  <xsl:apply-templates mode="instructionPart" />
</xsl:template>

<xsl:template mode="instructionPart" match="java:string">
  <xsl:text>"</xsl:text>
    <xsl:apply-templates mode="instructionPart" />
  <xsl:text>"</xsl:text>
</xsl:template>

<!-- instruction and block -->
<xsl:template mode="body" match="java:instruction">
  <xsl:call-template name="indent"/>
    <xsl:apply-templates mode="instructionPart" />
  <xsl:text>;</xsl:text><xsl:call-template name="newLine" />
</xsl:template>

<xsl:template mode="body" match="java:block">
  <xsl:call-template name="indent"/><xsl:text>{</xsl:text><xsl:call-template name="newLine" />
    <xsl:apply-templates mode="body" />
  <xsl:call-template name="indent"/><xsl:text>}</xsl:text><xsl:call-template name="newLine" />
</xsl:template>

<!-- exceptions handling  -->

<xsl:template mode="body" match="java:try">
  <xsl:call-template name="indent"/><xsl:text>try {</xsl:text><xsl:call-template name="newLine" />
    <xsl:apply-templates mode="body" />
  <xsl:call-template name="indent"/><xsl:text>}</xsl:text><xsl:call-template name="newLine" />
</xsl:template>

<xsl:template mode="body" match="java:catchException[@name]">
  <xsl:call-template name="indent"/>
    <xsl:text>catch(Exception </xsl:text>
      <xsl:value-of select="@name" />
    <xsl:text>) {</xsl:text>
    <xsl:call-template name="newLine" />
    <xsl:apply-templates mode="body" />
  <xsl:call-template name="indent"/><xsl:text>}</xsl:text><xsl:call-template name="newLine" />
</xsl:template>

<xsl:template mode="body" match="java:finally">
  <xsl:call-template name="indent"/><xsl:text>finally {</xsl:text><xsl:call-template name="newLine" />
    <xsl:apply-templates mode="body" />
  <xsl:call-template name="indent"/><xsl:text>}</xsl:text><xsl:call-template name="newLine" />
</xsl:template>

<xsl:template mode="body" match="java:throwException[@variable]">
  <xsl:call-template name="indent"/>
    <xsl:text>throw new Exception(</xsl:text>
    <xsl:value-of select="@variable"/>
    <xsl:text>);</xsl:text>
  <xsl:call-template name="newLine" />
</xsl:template>

<!-- loops and conditionals -->
<xsl:template mode="body" match="java:if[@test] | java:while[@test]">
  <xsl:call-template name="indent"/>
    <xsl:value-of select="local-name()"/>
    <xsl:text> ( </xsl:text>
      <xsl:value-of select="@test" />
    <xsl:text> ) {</xsl:text><xsl:call-template name="newLine" />
    
    <xsl:apply-templates mode="body" />
    
  <xsl:call-template name="indent"/><xsl:text>}</xsl:text><xsl:call-template name="newLine" />
</xsl:template>

<xsl:template mode="body" match="java:else">
  <xsl:call-template name="indent"/><xsl:text>else {</xsl:text><xsl:call-template name="newLine" />
    <xsl:apply-templates mode="body" />
  <xsl:call-template name="indent"/><xsl:text>}</xsl:text><xsl:call-template name="newLine" />
</xsl:template>

<xsl:template mode="body" match="java:for[@type and @index and @start and @length]">
  <xsl:call-template name="indent"/><xsl:text>for (</xsl:text>
    <xsl:value-of select="@type"/><xsl:call-template name="space"/><xsl:value-of select="@index"/>
    <xsl:text>=</xsl:text><xsl:value-of select="@start"/><xsl:text>; </xsl:text>
    <xsl:value-of select="@index"/>&lt;<xsl:value-of select="@length"/><xsl:text>; </xsl:text>
    <xsl:value-of select="@index"/><xsl:text>++</xsl:text>
    <xsl:text>) {</xsl:text><xsl:call-template name="newLine" />
    
    <xsl:apply-templates mode="body" />
    
  <xsl:call-template name="indent"/><xsl:text>}</xsl:text><xsl:call-template name="newLine" />
</xsl:template>

<xsl:template mode="body" match="java:switch[@variable]">
  <xsl:call-template name="indent"/><xsl:text>switch(</xsl:text>
    <xsl:value-of select="@variable" /><xsl:text>) </xsl:text>
  <xsl:text>{</xsl:text><xsl:call-template name="newLine" />
    <xsl:apply-templates mode="body" />
  <xsl:call-template name="indent"/><xsl:text>}</xsl:text><xsl:call-template name="newLine" />
</xsl:template>

<xsl:template mode="body" match="java:case[@value]">
  <xsl:call-template name="indent"/>
    <xsl:text>case </xsl:text>
    <xsl:value-of select="@value"/>
    <xsl:text>:</xsl:text><xsl:call-template name="newLine" />
    
    <xsl:call-template name="indent"/><xsl:text>{</xsl:text><xsl:call-template name="newLine" />
      <xsl:apply-templates mode="body" />
      <xsl:apply-templates mode="break" select="@break" />
    <xsl:call-template name="indent"/><xsl:text>}</xsl:text><xsl:call-template name="newLine" />
    
  <xsl:call-template name="newLine" />
</xsl:template>

<xsl:template mode="break" match="@break[.='true']">
  <xsl:call-template name="indent"/><xsl:text>break;</xsl:text><xsl:call-template name="newLine" />
</xsl:template>

<!-- high level instructions -->

<xsl:template mode="instructionPart" match="java:sum[java:*]">
  <xsl:for-each select="java:*">
    <xsl:if test="position() &gt; 1">
      <xsl:text> + </xsl:text>  
    </xsl:if>
    <xsl:apply-templates mode="instructionPart" select="." />
  </xsl:for-each>
</xsl:template>

<xsl:template mode="instructionPart" match="java:sum">
  <xsl:value-of select="'0'" />
</xsl:template>

<!-- javadoc -->
<xsl:template mode="javaDoc" match="javadoc:comment">
<xsl:call-template name="indentLess"/>/**
<xsl:apply-templates mode="javaDoc" />
<xsl:call-template name="indentLess"/> */
</xsl:template>

<xsl:template mode="javaDoc" match="javadoc:line">
<xsl:call-template name="indentLess"/> * <xsl:copy-of select="child::node()"/><xsl:call-template name="newLine" />
</xsl:template>

<xsl:template mode="javaDoc" match="javadoc:author">
<xsl:call-template name="indentLess"/> * @author <xsl:value-of select="."/><xsl:call-template name="newLine" />
</xsl:template>

<xsl:template mode="javaDoc" match="javadoc:version">
<xsl:call-template name="indentLess"/> * @version <xsl:value-of select="."/><xsl:call-template name="newLine" />
</xsl:template>

<xsl:template mode="javaDoc" match="text()" />

<!-- utils -->

<xsl:template name="newLine">
  <xsl:text>
</xsl:text>
</xsl:template>

<xsl:template name="space">
  <xsl:text> </xsl:text>
</xsl:template>

<xsl:template name="indentLess">
  <xsl:param name="removelevels" select="1" />
  <xsl:for-each select="ancestor::java:method | ancestor::java:class">
    <xsl:if test="position() &gt; $removelevels">
      <xsl:call-template name="baseIndent" />
    </xsl:if>
  </xsl:for-each>
</xsl:template>

<xsl:template name="indent">
  <xsl:for-each select="  ancestor::java:do | ancestor::java:for | ancestor::java:while 
                        | ancestor::java:switch | ancestor::java:case 
                        | ancestor::java:if | ancestor::java:else
                        | ancestor::java:try | ancestor::java:catchException | ancestor::java:finally
                        | ancestor::java:block | ancestor::java:method | ancestor::java:class">
    <xsl:call-template name="baseIndent" />
  </xsl:for-each>
</xsl:template>

<xsl:template name="baseIndent">
  <xsl:text>   </xsl:text>
</xsl:template>
  
</xsl:stylesheet>