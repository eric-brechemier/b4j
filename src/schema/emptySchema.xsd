<?xml version="1.0" encoding="ISO-8859-1"?>
<xsd:schema
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xsl:version="1.0"
  xmlns:ant="antlib:org.apache.tools.ant"
  xsl:exclude-result-prefixes="xsl ant"
  
  elementFormDefault="qualified"
  
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:include="http://eric.brechemier.name/2004/generation/encoder-decoder/idRefResolution/includeValues/"
  xmlns:ignore="http://eric.brechemier.name/2004/generation/encoder-decoder/idRefResolution/ignoreValues/"
  xmlns:mathFP="http://eric.brechemier.name/2004/Onno.Hommes/MathFP/"
  xmlns:config="http://eric.brechemier.name/2004/generation/encoder-decoder/config"
  xmlns:a4j="http://eric.brechemier.name/2004/generation/encoder-decoder/semanticActionsForJava"
>
  <xsl:variable name="nsPrefix" select="/ant:project/ant:property[@name='USER.namespace.prefix']/@value" />
  <xsl:variable name="nsURI" select="/ant:project/ant:property[@name='USER.namespace.uri']/@value" />
  <xsl:attribute name="{$nsPrefix}:declareNamespace" namespace="{$nsURI}">ignore</xsl:attribute>
  <xsl:attribute name="targetNamespace">
    <xsl:value-of select="$nsURI" />
  </xsl:attribute>
  
  <xsd:import namespace="http://eric.brechemier.name/2004/Onno.Hommes/MathFP/" schemaLocation="mathFP.xsd"/>
  <xsd:import namespace="http://eric.brechemier.name/2004/generation/encoder-decoder/idRefResolution/ignoreValues/" schemaLocation="idRefIgnore.xsd"/>
  <xsd:import namespace="http://eric.brechemier.name/2004/generation/encoder-decoder/idRefResolution/includeValues/" schemaLocation="idRefInclude.xsd"/>
  <xsd:import namespace="http://eric.brechemier.name/2004/Onno.Hommes/MathFP/" schemaLocation="mathFP.xsd"/>
  
  <xsl:comment>
    elements: User Vocabulary 
  </xsl:comment>
  <xsl:comment>
   Each element refers to a complexType through its type attribute.
   Using ant addSchemaTypes, missing complexTypes will be added, using type value as hints:
    - when type="t" or type="text", a simple content complexType is created (element with text value)
        e.g. &lt;xsd:element name="root" type="st" /&gt;
    - when type="ch" or type="choice" a complex type with children in a choice is created
        e.g. &lt;xsd:element name="root" type="ch" /&gt;
    - when type="seq" or type="sequence" a complex type with children in a sequence is created
        e.g. &lt;xsd:element name="root" type="seq" /&gt;
    - when type attribute is missing a complex type without children is created
        e.g. &lt;xsd:element name="root" /&gt;
    - when a qualified name is provided (prefix:localName), localName is used as the complexType name
        e.g. &lt;xsd:element name="root" type="usr:Root" /&gt;
  </xsl:comment>
  
  <xsd:element name="root" type="sequence" />
  
  <xsl:comment>
    complexTypes defining tree structure: User Grammar 
    NOTA simpleTypes may be used to rename standard types, and for custom codec in future versions.
  </xsl:comment>
  <xsl:comment>
    Using ant addSchemaAnnotations, missing annotations are added to schema &amp; complex types
  </xsl:comment>
  
  
</xsd:schema>